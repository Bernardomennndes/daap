services:
  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: daap-traefik
    restart: unless-stopped
    ports:
      - "${TRAEFIK_WEB_PORT:-80}:80"
      - "${TRAEFIK_WEBSECURE_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # Database
  mongodb:
    image: mongo:7
    container_name: daap-mongodb
    restart: always
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-daap}
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network

  # Cache Systems
  redis:
    image: redis:7-alpine
    container_name: daap-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app_network

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: daap-dragonfly
    restart: always
    ports:
      - "${DRAGONFLY_PORT:-6380}:6379"
    networks:
      - app_network

  # OpenTelemetry & Observability
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: daap-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "14250:14250"  # Jaeger gRPC (legacy)
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=info
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: daap-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app_network
    depends_on:
      - reviews-service
      - cache-service
      - search-service
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.4.0
    container_name: daap-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - app_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB v1.8 - Time Series Database for k6 metrics (v1.8 for k6 compatibility)
  influxdb:
    image: influxdb:1.8
    container_name: daap-influxdb
    restart: unless-stopped
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB:-k6}
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "influx", "-execute", "SHOW DATABASES"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reviews Service (Escal√°vel)
  reviews-service:
    build:
      context: .
      dockerfile: ./apps/reviews-service/Dockerfile
    restart: always
    environment:
      - MONGO_URI=${MONGO_URI}
      - CACHE_SERVICE_URL=${CACHE_SERVICE_URL}
      - SEARCH_SERVICE_URL=${SEARCH_SERVICE_URL}
      - REVIEWS_SERVICE_PORT=${REVIEWS_SERVICE_PORT:-3001}
      - REDIS_URL=${REDIS_URL}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      - OTEL_SERVICE_NAME=reviews-service
      - OTEL_TRACES_SAMPLER=${OTEL_TRACES_SAMPLER:-always_on}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mongodb
      - cache-service
      - redis
      - jaeger
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reviews.rule=Host(`reviews.localhost`) || PathPrefix(`/api/reviews`)"
      - "traefik.http.routers.reviews.service=reviews-service"
      - "traefik.http.services.reviews-service.loadbalancer.server.port=${REVIEWS_SERVICE_PORT:-3001}"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.timeout=${HEALTH_CHECK_TIMEOUT:-10}s"

  cache-service:
    container_name: daap-cache-service
    build:
      context: .
      dockerfile: ./apps/cache-service/Dockerfile
    restart: always
    environment:
      - SEARCH_SERVICE_URL=${SEARCH_SERVICE_URL}
      - CACHE_TYPE=${CACHE_ADAPTER:-redis}
      - CACHE_HOST=${REDIS_HOST:-redis}
      - CACHE_PORT=${REDIS_PORT:-6379}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - DRAGONFLY_HOST=${DRAGONFLY_HOST:-dragonfly}
      - DRAGONFLY_PORT=${DRAGONFLY_PORT:-6379}
      - CACHE_SERVICE_PORT=${CACHE_SERVICE_PORT:-3002}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      - OTEL_SERVICE_NAME=cache-service
      - OTEL_TRACES_SAMPLER=${OTEL_TRACES_SAMPLER:-always_on}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - redis
      - dragonfly
      - search-service
      - jaeger
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cache.rule=Host(`cache.localhost`) || PathPrefix(`/api/cache`)"
      - "traefik.http.routers.cache.service=cache-service"
      - "traefik.http.services.cache-service.loadbalancer.server.port=${CACHE_SERVICE_PORT:-3002}"
      - "traefik.http.services.cache-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.cache-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"

  search-service:
    container_name: daap-search-service
    build:
      context: .
      dockerfile: ./apps/search-service/Dockerfile
    restart: always
    environment:
      - MONGO_URI=${MONGO_URI}
      - SEARCH_SERVICE_PORT=${SEARCH_SERVICE_PORT:-3003}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4317}
      - OTEL_SERVICE_NAME=search-service
      - OTEL_TRACES_SAMPLER=${OTEL_TRACES_SAMPLER:-always_on}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mongodb
      - jaeger
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.search.rule=Host(`search.localhost`) || PathPrefix(`/api/search`)"
      - "traefik.http.routers.search.service=search-service"
      - "traefik.http.services.search-service.loadbalancer.server.port=${SEARCH_SERVICE_PORT:-3003}"
      - "traefik.http.services.search-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.search-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"

volumes:
  mongodb_data:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local

networks:
  app_network:
    driver: bridge
