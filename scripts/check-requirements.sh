#!/bin/bash

# Mudar para o diret√≥rio do projeto (um n√≠vel acima do diret√≥rio scripts)
cd "$(dirname "$0")/.."

echo "üîç DAAP - Verifica√ß√£o de Pr√©-requisitos"
echo "========================================"
echo ""

# Verificar se o Docker est√° instalado e rodando
echo "üê≥ Verificando Docker..."
if command -v docker &> /dev/null; then
    if docker info &> /dev/null; then
        docker_version=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        echo "‚úÖ Docker instalado e rodando (vers√£o: $docker_version)"
    else
        echo "‚ùå Docker instalado mas n√£o est√° rodando"
        echo "üí° Execute: systemctl start docker (Linux) ou inicie o Docker Desktop"
        exit 1
    fi
else
    echo "‚ùå Docker n√£o est√° instalado"
    echo "üí° Instale Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

# Verificar se o Docker Compose est√° dispon√≠vel
echo ""
echo "üîß Verificando Docker Compose..."
if docker compose version &> /dev/null; then
    compose_version=$(docker compose version --short)
    echo "‚úÖ Docker Compose dispon√≠vel (vers√£o: $compose_version)"
elif command -v docker-compose &> /dev/null; then
    compose_version=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    echo "‚úÖ Docker Compose dispon√≠vel (vers√£o: $compose_version)"
    echo "‚ÑπÔ∏è  Usando docker-compose (vers√£o legacy)"
else
    echo "‚ùå Docker Compose n√£o est√° dispon√≠vel"
    echo "üí° Instale Docker Compose: https://docs.docker.com/compose/install/"
    exit 1
fi

# Verificar se as portas necess√°rias est√£o livres
echo ""
echo "üîå Verificando portas dispon√≠veis..."
ports_to_check=(80 443 3001 3002 3003 6379 8080 27017)
blocked_ports=()

for port in "${ports_to_check[@]}"; do
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        blocked_ports+=($port)
    fi
done

if [ ${#blocked_ports[@]} -eq 0 ]; then
    echo "‚úÖ Todas as portas necess√°rias est√£o dispon√≠veis"
else
    echo "‚ö†Ô∏è  Algumas portas est√£o em uso:"
    for port in "${blocked_ports[@]}"; do
        process=$(lsof -Pi :$port -sTCP:LISTEN -t | head -1)
        process_name=$(ps -p $process -o comm= 2>/dev/null || echo "desconhecido")
        echo "  - Porta $port: processo $process ($process_name)"
    done
    echo ""
    echo "üí° Para liberar portas:"
    echo "  - Pare os processos usando as portas"
    echo "  - Ou modifique as portas no arquivo .env"
fi

# Verificar espa√ßo em disco
echo ""
echo "üíæ Verificando espa√ßo em disco..."
available_space=$(df -h . | awk 'NR==2 {print $4}' | sed 's/G//')
if [ "${available_space%.*}" -ge 5 ]; then
    echo "‚úÖ Espa√ßo em disco suficiente (${available_space}B dispon√≠vel)"
else
    echo "‚ö†Ô∏è  Pouco espa√ßo em disco (${available_space}B dispon√≠vel)"
    echo "üí° Recomendado: pelo menos 5GB livres"
fi

# Verificar mem√≥ria RAM
echo ""
echo "üß† Verificando mem√≥ria RAM..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    total_ram=$(system_profiler SPHardwareDataType | grep "Memory:" | awk '{print $2}')
    echo "‚ÑπÔ∏è  Mem√≥ria total: ${total_ram}B"
    if [ "${total_ram%.*}" -ge 8 ]; then
        echo "‚úÖ Mem√≥ria RAM suficiente"
    else
        echo "‚ö†Ô∏è  Pouca mem√≥ria RAM (recomendado: 8GB+)"
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    total_ram=$(free -h | awk 'NR==2{print $2}')
    echo "‚ÑπÔ∏è  Mem√≥ria total: $total_ram"
    echo "‚úÖ Verifica√ß√£o de RAM completada"
else
    echo "‚ÑπÔ∏è  Sistema operacional n√£o reconhecido para verifica√ß√£o de RAM"
fi

# Verificar conectividade de rede
echo ""
echo "üåê Verificando conectividade..."
if ping -c 1 google.com &> /dev/null; then
    echo "‚úÖ Conectividade com a internet dispon√≠vel"
else
    echo "‚ö†Ô∏è  Sem conectividade com a internet"
    echo "üí° Algumas funcionalidades podem n√£o funcionar"
fi

# Verificar se os arquivos de configura√ß√£o existem
echo ""
echo "üìÅ Verificando arquivos de configura√ß√£o..."
config_files=(".env" "docker-compose.yml" "traefik.yml" "hosts-local.txt")
missing_files=()

for file in "${config_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file encontrado"
    else
        echo "‚ùå $file n√£o encontrado"
        missing_files+=($file)
    fi
done

# Verificar hosts locais
echo ""
echo "üè† Verificando configura√ß√£o de hosts..."
hosts_configured=true
required_hosts=("daap.localhost" "reviews.localhost" "cache.localhost" "search.localhost" "traefik.localhost")

for host in "${required_hosts[@]}"; do
    if ! grep -q "$host" /etc/hosts 2>/dev/null; then
        hosts_configured=false
        break
    fi
done

if [ "$hosts_configured" = true ]; then
    echo "‚úÖ Hosts locais configurados"
else
    echo "‚ö†Ô∏è  Hosts locais n√£o configurados"
    echo "üí° Execute: sudo sh -c 'cat hosts-local.txt >> /etc/hosts'"
fi

# Resumo final
echo ""
echo "üìã Resumo da Verifica√ß√£o"
echo "========================================"

if [ ${#blocked_ports[@]} -eq 0 ] && [ ${#missing_files[@]} -eq 0 ]; then
    echo "‚úÖ Sistema pronto para deploy!"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "  1. Configure hosts (se necess√°rio): sudo sh -c 'cat hosts-local.txt >> /etc/hosts'"
    echo "  2. Valide configura√ß√£o: ./validate-env.sh"
    echo "  3. Inicie o deploy: ./deploy.sh 3"
    echo "  4. Monitore o sistema: ./monitor.sh"
else
    echo "‚ö†Ô∏è  Alguns problemas foram encontrados:"
    
    if [ ${#blocked_ports[@]} -gt 0 ]; then
        echo "  - Portas em uso: ${blocked_ports[*]}"
    fi
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        echo "  - Arquivos ausentes: ${missing_files[*]}"
    fi
    
    echo ""
    echo "üîß Corrija os problemas acima antes de prosseguir"
fi

echo ""
echo "üìö Documenta√ß√£o dispon√≠vel:"
echo "  - README.md (vis√£o geral)"
echo "  - ENV_GUIDE.md (configura√ß√£o de vari√°veis)"
echo "  - ./setup-info.sh (informa√ß√µes de configura√ß√£o)"
