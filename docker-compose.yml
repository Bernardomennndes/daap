services:
  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: daap-traefik
    restart: unless-stopped
    ports:
      - "${TRAEFIK_WEB_PORT:-80}:80"
      - "${TRAEFIK_WEBSECURE_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # Database
  mongodb:
    image: mongo:7
    container_name: daap-mongodb
    restart: always
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-daap}
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network

  # Cache Systems
  redis:
    image: redis:7-alpine
    container_name: daap-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app_network

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: daap-dragonfly
    restart: always
    ports:
      - "${DRAGONFLY_PORT:-6380}:6379"
    networks:
      - app_network

  # Reviews Service (Escal√°vel)
  reviews-service:
    build:
      context: .
      dockerfile: ./apps/reviews-service/Dockerfile
    restart: always
    environment:
      - MONGO_URI=${MONGO_URI}
      - CACHE_SERVICE_URL=${CACHE_SERVICE_URL}
      - REVIEWS_SERVICE_PORT=${REVIEWS_SERVICE_PORT:-3001}
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_ID=$${HOSTNAME}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - mongodb
      - cache-service
      - redis
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reviews.rule=Host(`reviews.localhost`) || PathPrefix(`/api/reviews`)"
      - "traefik.http.routers.reviews.service=reviews-service"
      - "traefik.http.services.reviews-service.loadbalancer.server.port=${REVIEWS_SERVICE_PORT:-3001}"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"
      - "traefik.http.services.reviews-service.loadbalancer.healthcheck.timeout=${HEALTH_CHECK_TIMEOUT:-10}s"

  cache-service:
    container_name: daap-cache-service
    build:
      context: .
      dockerfile: ./apps/cache-service/Dockerfile
    restart: always
    environment:
      - SEARCH_SERVICE_URL=${SEARCH_SERVICE_URL}
      - CACHE_TYPE=${CACHE_ADAPTER:-redis}
      - CACHE_HOST=${REDIS_HOST:-redis}
      - CACHE_PORT=${REDIS_PORT:-6379}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - DRAGONFLY_HOST=${DRAGONFLY_HOST:-dragonfly}
      - DRAGONFLY_PORT=${DRAGONFLY_PORT:-6379}
      - CACHE_SERVICE_PORT=${CACHE_SERVICE_PORT:-3002}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - redis
      - dragonfly
      - search-service
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cache.rule=Host(`cache.localhost`) || PathPrefix(`/api/cache`)"
      - "traefik.http.routers.cache.service=cache-service"
      - "traefik.http.services.cache-service.loadbalancer.server.port=${CACHE_SERVICE_PORT:-3002}"
      - "traefik.http.services.cache-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.cache-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"

  search-service:
    container_name: daap-search-service
    build:
      context: .
      dockerfile: ./apps/search-service/Dockerfile
    restart: always
    environment:
      - MONGO_URI=${MONGO_URI}
      - SEARCH_SERVICE_PORT=${SEARCH_SERVICE_PORT:-3003}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - mongodb
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.search.rule=Host(`search.localhost`) || PathPrefix(`/api/search`)"
      - "traefik.http.routers.search.service=search-service"
      - "traefik.http.services.search-service.loadbalancer.server.port=${SEARCH_SERVICE_PORT:-3003}"
      - "traefik.http.services.search-service.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.search-service.loadbalancer.healthcheck.interval=${HEALTH_CHECK_INTERVAL:-30}s"

  # Web Interface
  web:
    container_name: daap-web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=${REVIEWS_EXTERNAL_URL:-http://reviews.localhost}
      - DEBUG=${DEBUG:-false}
    depends_on:
      - reviews-service
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`daap.localhost`)"
      - "traefik.http.routers.web.service=web-service"
      - "traefik.http.services.web-service.loadbalancer.server.port=${WEB_PORT:-3000}"

volumes:
  mongodb_data:

networks:
  app_network:
    driver: bridge
