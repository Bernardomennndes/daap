#!/bin/bash

# Cache Migration Test Script Wrapper
# 
# Este script facilita a execu칞칚o do teste de migra칞칚o de cache
# Uso: ./run-bulk-test-runner.sh [queries] [concorrencia]

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun칞칚o para logging
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${CYAN}[${timestamp}] [INFO    ]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[${timestamp}] [WARN    ]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[${timestamp}] [ERROR   ]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[${timestamp}] [SUCCESS ]${NC} $message"
            ;;
    esac
}

# Verificar se estamos no diret칩rio correto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$(dirname "$SCRIPT_DIR")")")"

# Valores padr칚o
QUERIES=${1:-100}
CONCURRENCY=${2:-5}

echo ""
echo "=========================================="
echo "游빍 Cache Migration Test Runner"
echo "=========================================="
echo "Queries: $QUERIES | Concorr칡ncia: $CONCURRENCY"
echo ""

# Verificar se o Node.js est치 instalado
if ! command -v node &> /dev/null; then
    log "ERROR" "Node.js n칚o encontrado. Instale o Node.js para continuar."
    exit 1
fi

# Verificar se o Redis CLI est치 instal칤vel
if ! command -v redis-cli &> /dev/null; then
    log "ERROR" "redis-cli n칚o encontrado. Instale o Redis CLI para continuar."
    echo "       No macOS: brew install redis"
    echo "       No Ubuntu: sudo apt install redis-tools"
    exit 1
fi

# Verificar se os servi칞os est칚o rodando
log "INFO" "Verificando servi칞os necess치rios..."

# Verificar Docker
if ! command -v docker &> /dev/null; then
    log "ERROR" "Docker n칚o encontrado. Certifique-se de que o Docker est치 instalado."
    exit 1
fi

# Verificar se o docker-compose est치 rodando
cd "$PROJECT_ROOT"
if ! docker compose ps | grep -q "Up"; then
    log "WARN" "Servi칞os Docker n칚o est칚o rodando. Iniciando..."
    if ! docker compose up -d; then
        log "ERROR" "Falha ao iniciar servi칞os Docker"
        exit 1
    fi
    log "INFO" "Aguardando servi칞os iniciarem..."
    sleep 10
fi

# Verificar conectividade dos servi칞os
log "INFO" "Testando conectividade dos servi칞os..."

# Testar Redis
if ! redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; then
    log "ERROR" "N칚o foi poss칤vel conectar ao Redis (localhost:6379)"
    exit 1
fi

# Testar Dragonfly
if ! redis-cli -h localhost -p 6380 ping > /dev/null 2>&1; then
    log "ERROR" "N칚o foi poss칤vel conectar ao Dragonfly (localhost:6380)"
    exit 1
fi

# Testar servi칞o web
if ! curl -s -H "Host: reviews.localhost" http://localhost/health > /dev/null; then
    log "WARN" "Servi칞o de reviews pode n칚o estar respondendo. Continuando mesmo assim..."
fi

log "SUCCESS" "Todos os servi칞os est칚o funcionais!"

# Executar o script principal
log "INFO" "Iniciando teste de migra칞칚o de cache..."
echo ""

cd "$SCRIPT_DIR"
node bulk-test-runner.js "$QUERIES" "$CONCURRENCY"

RESULT=$?

echo ""
if [ $RESULT -eq 0 ]; then
    log "SUCCESS" "Teste conclu칤do com sucesso!"
else
    log "ERROR" "Teste falhou com c칩digo de sa칤da $RESULT"
fi

exit $RESULT
